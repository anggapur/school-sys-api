// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/proto/file/file-service.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileUploadPlatform_RequestFileUpload_FullMethodName = "/FileUploadPlatform/RequestFileUpload"
)

// FileUploadPlatformClient is the client API for FileUploadPlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadPlatformClient interface {
	RequestFileUpload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadDetailResponse, error)
}

type fileUploadPlatformClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadPlatformClient(cc grpc.ClientConnInterface) FileUploadPlatformClient {
	return &fileUploadPlatformClient{cc}
}

func (c *fileUploadPlatformClient) RequestFileUpload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadDetailResponse, error) {
	out := new(FileUploadDetailResponse)
	err := c.cc.Invoke(ctx, FileUploadPlatform_RequestFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileUploadPlatformServer is the server API for FileUploadPlatform service.
// All implementations should embed UnimplementedFileUploadPlatformServer
// for forward compatibility
type FileUploadPlatformServer interface {
	RequestFileUpload(context.Context, *FileUploadRequest) (*FileUploadDetailResponse, error)
}

// UnimplementedFileUploadPlatformServer should be embedded to have forward compatible implementations.
type UnimplementedFileUploadPlatformServer struct {
}

func (UnimplementedFileUploadPlatformServer) RequestFileUpload(context.Context, *FileUploadRequest) (*FileUploadDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFileUpload not implemented")
}

// UnsafeFileUploadPlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadPlatformServer will
// result in compilation errors.
type UnsafeFileUploadPlatformServer interface {
	mustEmbedUnimplementedFileUploadPlatformServer()
}

func RegisterFileUploadPlatformServer(s grpc.ServiceRegistrar, srv FileUploadPlatformServer) {
	s.RegisterService(&FileUploadPlatform_ServiceDesc, srv)
}

func _FileUploadPlatform_RequestFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadPlatformServer).RequestFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileUploadPlatform_RequestFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadPlatformServer).RequestFileUpload(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileUploadPlatform_ServiceDesc is the grpc.ServiceDesc for FileUploadPlatform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploadPlatform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileUploadPlatform",
	HandlerType: (*FileUploadPlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestFileUpload",
			Handler:    _FileUploadPlatform_RequestFileUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/file/file-service.proto",
}
